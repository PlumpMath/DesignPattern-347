package singleton;

/**
 * 单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。这样的模式有几个好处：
 * 
 * 1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。
 * 
 * 2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。
 * 
 * 3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。
 * （比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。
 * 
 * @author Administrator
 *
 */
public class SingletonInstance {

	private static SingletonInstance instance;
	
	private SingletonInstance(){
	}
	
	public static SingletonInstance getInstance(){
		if (instance == null){
			/**
			 * 仅仅锁住instance对象, 只有在第一次创建instance时会加一次锁, 
			 * 如果synchronized锁定整个方法, 对于多线程调用时, 效率会有影响.
			 */
			synchronized(instance){ 
				if (instance == null){
					instance = new SingletonInstance();
				}
			}
		}
			
		return instance;
	}
	
}
